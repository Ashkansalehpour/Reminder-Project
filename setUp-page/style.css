/* Keyframes for rotating counter-clockwise animation */
@keyframes rotateCounterClockwise {
  from {
    stroke-dashoffset: 0;
  }
  to {
    stroke-dashoffset: -750;
  }
}

body {
  background: #141414;
  margin: 0;
}
.blur-cover {
  width: 100%;
  height: 100%;
  background-color: #454545cc;
  filter: blur(5px);
  position: absolute;
  display: none;
  z-index: 1;
}
#setUp-page-container {
  width: 99%;
  background-color: #141414;
  margin: 0 auto;
  position: relative;
}

header {
  width: 100%;
  height: 50px;
  background-color: #141414;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 10px;
}

.back-icon {
  height: 35px;
}

.trash-icon {
  height: 40px;
}

.trash-icon,
.back-icon {
  cursor: pointer;
}

/* -=-=-==-=-=-=-=-=-=-=-=-=- */
#RimTime-clock {
  width: 100%;
  height: 370px;
  overflow: hidden;
  perspective: 1000px;
  display: flex;
  justify-content: center;
  align-items: center;
}


#RimTime-numbers,
#RimTime-leters {
  width: 80%;
  margin: 0 auto;
  margin-top:   10px;
  font-size: 30px;
  text-align: center;
  color: #fff;
}

#RimTime-leters {
  font-size: 25px;
}

#RimTime-numbers :nth-child(1),
#RimTime-leters :nth-child(1) {
  color: #2957fb;
}

#RimTime-numbers :nth-child(3),
#RimTime-leters :nth-child(3) {
  color: #fb296d;
}

#RimTime-numbers :nth-child(5),
#RimTime-leters :nth-child(5) {
  color: #fae60e;
}

#RimTime-numbers :nth-child(6),
#RimTime-numbers :nth-child(7),
#RimTime-leters :nth-child(6),
#RimTime-leters :nth-child(7) {
  color: #1dff5d;
}

/* ----------------------- */

#Description-container {
  width: 95%;
  margin: 0 auto;
  margin-top: 20px;
  background-color: #252525;
  border-radius: 10px;
}
#Description-container span {
  color: #bababa;
  margin: 10px;
}
#textarea-contaner {
  width: 100%;
  color: #fff;
  text-align: center;
  /* margin-top: 10px; */
}

#textarea-contaner textarea {
  resize: none;
  width: 97%;
  height: 70px;
  background-color: #252525;
  border: none;
  outline: none;
  border-radius: 10px;
  color: #505050;
}

#edit-time-box {
  width: 95%;
  height: 35%;
  background-color: #252525;
  margin: 0 auto;
  margin-top: 3%;
  border-radius: 10px;
  cursor: pointer;
  padding: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

#rington-box {
  width: 95%;
  height: 50px;
  margin: 0 auto;
  margin-top: 20px;
  border-radius: 10px;
  background-color: #252525;
  display: flex;
  justify-content: space-around;
  align-items: center;
  color: #fff;
}

#rington-box :nth-child(2) {
  opacity: 0.5;
}
/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */

.rington-list {
  width: 95%;
  height: 60%;
  top: 30%;
  position: absolute;
  left: 2.5%;
  background-color: #2957fb;
  margin: 0 auto;
  display: none;
  z-index: 1;
  /* position: relative; */
}

.close-list-btn {
  width: 40px;
  margin-left: 88%;
  cursor: pointer;
  position: absolute;
}

.save-btn {
  width: 60%;
  color: #1dff5d;
  height: 40px;
  margin: 0 auto;
  margin-top: 3%;
  margin-bottom: 3%;
  text-align: center;
  border-radius: 10px;
  background-color: #252525;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}

/* Alarm Style */

/* Styling for the clock */
.clock {
  position: relative;
  width: 280px;
  height: 280px;
  display: flex;
  justify-content: center;
  align-items: center;
  transform: scale(1.2);
  box-shadow: inset 5px 5px 25px rgba(0, 0, 0, 0.25);
  border-radius: 50%;
}
/* Styling for the time container within the clock */

#time {
  position: relative;
  width: 70%; /* Adjust the width of the clock to your preference */
  height: 70%; /* Adjust the height of the clock to your preference */
  display: flex;
  justify-content: center;
  align-items: center;
  transform-style: preserve-3d;
  transition: transform 0.5s ease;
}
/* Styling for circles within the time container */
#time .circle {
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Styling for the SVG elements within the circles */
#time .circle svg {
  position: relative;
  transform: rotate(270deg);
}

/* Styling for the first circle's SVG */
#time .circle:nth-child(1) svg {
  height: 250px;
  width: 250px;
}

/* Styling for the second circle's SVG */
#time .circle:nth-child(2) svg {
  height: 210px;
  width: 210px;
}

/* Styling for the third circle's SVG */
#time .circle:nth-child(3) svg {
  height: 170px;
  width: 170px;
}

/* Styling for the inner circles within the SVG elements */
#time .circle svg circle {
  width: 100%;
  height: 100%;
  fill: transparent;
  stroke-width: 5;
  stroke: var(--clr); /* Color of the stroke (border) */
  transform: translate(5px, 5px); /* Offset the circle by 5px */
  opacity: 0.25; /* Set opacity to 0.25 */
}

/* Styling for the first circle's SVG circle */
#time .circle:nth-child(1) svg circle {
  stroke-dasharray: 760; /* Total length of the stroke */
  stroke-dashoffset: 760; /* Initially, no part of the stroke is visible */
}

/* Styling for the second circle's SVG circle */
#time .circle:nth-child(2) svg circle {
  stroke-dasharray: 630; /* Total length of the stroke */
  stroke-dashoffset: 630; /* Initially, no part of the stroke is visible */
}

/* Styling for the third circle's SVG circle */
#time .circle:nth-child(3) svg circle {
  stroke-dasharray: 510; /* Total length of the stroke */
  stroke-dashoffset: 510; /* Initially, no part of the stroke is visible */
}
/* Styling for dots */
.dots {
  position: absolute; /* Positioned absolutely within its containing element */
  width: 100%;
  height: 100%;
  display: flex; /* Use flexbox for alignment */
  align-items: flex-start; /* Align items to the start of the cross axis */
  justify-content: center; /* Center items along the main axis */
  z-index: 10; /* Set a higher z-index for stacking order */
}

/* Styling for the pseudo-element before each dot */
.dots::before {
  content: ""; /* Empty content for pseudo-element */
  position: absolute; /* Positioned absolutely within its parent .dots */
  top: -3px; /* Offset from the top by 3px */
  width: 15px; /* Set width */
  height: 15px; /* Set height */
  background: var(--clr); /* Set background color from CSS variable */
  border-radius: 50%; /* Make it a circle by setting border-radius to 50% */
  box-shadow:  /* Add box shadow for a decorative effect */ 0 0 40px var(--clr),
    /* Shadow with 40px blur */ 0 0 40px var(--clr),
    /* Another shadow with 40px blur */ 0 0 60px var(--clr),
    /* Shadow with 60px blur */ 0 0 80px var(--clr); /* Shadow with 80px blur */
}
/* Styling for animation of the dots on each ring */

/* Animation for seconds dot */
.sec_dot::before {
  animation: rotateCounterClockwise var(--sec-anim-duration) linear infinite;
}

/* Animation for minutes dot */
.min_dot::before {
  animation: rotateCounterClockwise var(--min-anim-duration) linear infinite;
}

/* Animation for hours dot */
.hr_dot::before {
  animation: rotateCounterClockwise var(--hr-anim-duration) linear infinite;
}

/* Custom property to control rotation for seconds ring */
[data-ring="ss"] {
  --rotation: 0deg;
}

/* Custom property to control rotation for minutes ring */
[data-ring="mm"] {
  --rotation: 0deg;
}

/* Custom property to control rotation for hours ring */
[data-ring="hh"] {
  --rotation: 0deg;
}
/* Styling for the time span within the clock */

#time span {
  position: absolute; /* Positioned absolutely within its parent */
  inset: 55px; /* Positioned 55px from all edges */
  text-align: center; /* Center-align text */
  color: #999; /* Set text color */
  font-family: consolas; /* Use Consolas font family */
  transform: rotate(
    calc(-30deg * var(--i))
  ); /* Rotate based on a custom property */
}

/* Styling for the "b" element within the time span */

#time span b {
  font-size: 0.75em; /* Set font size to 0.75em */
  font-weight: 500; /* Set font weight to 500 (semi-bold) */
  display: inline-block; /* Make it an inline-block element */
}
/* Styling for the timer container */

.timer-container {
  position: absolute; /* Positioned absolutely within its containing element */
  top: 50%; /* Positioned at the vertical center of its containing element */
  left: 10px; /* Positioned 10px from the left edge of its containing element */
  display: flex; /* Use flexbox for alignment */
  align-items: center; /* Center-align items vertically */
}

/* Style the timer input fields within the container */

.timer-container input {
  margin-right: 10px; /* Set right margin to create spacing between input fields */
  padding: 5px; /* Set padding for input fields */
}
